<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beat Revival Blog</title>
    <link>/</link>
    <description>Beat Revival Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 25 Feb 2024 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Progress Report 2</title>
      <link>/post/2024-2-25-progress-report-2/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>/post/2024-2-25-progress-report-2/</guid>
      <description>
&lt;p&gt;
Welcome to our second progress report. This post will cover everything we&#39;ve done since our break.
&lt;/p&gt;
&lt;br&gt;&lt;br&gt;

&lt;p&gt;
Most of our time was spent working on TDF decryption. TDF is the proprietary file format that Catalyst uses for its packet encryption.&lt;br&gt;&lt;br&gt;
When we captured packets (which you can read about in our last post), we captured the TDF encrypted packets, meaning they have to decrypted manually.
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
&lt;a href=&#34;https://github.com/ploxxxy/node-tdf&#34;&gt;After a lot of hard work&lt;/a&gt;, we&#39;ve managed to get to a point where we can decrypt and encrypt some of the basic server functions in real-time and we&#39;ve successfully managed to get the game to communicate with the server.
&lt;br&gt;&lt;br&gt;
&lt;img src=&#34;https://media.discordapp.net/attachments/1171240814714814555/1209595449552412703/image.png?ex=65e77e8c&amp;is=65d5098c&amp;hm=5e254e41c9bfe3956d5a369d90d1f926e225fadb01e49f3f3b1d6e6d264b96e0&amp;=&amp;format=webp&amp;quality=lossless&#34;&gt;
&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
We&#39;ve also been working on building the Catalyst API emulator and the Blaze server emulator (If you want to learn more about Blaze, check our previous post). They currently aren&#39;t very functional, but we have the groundwork of them which we&#39;re starting to build on.
&lt;/p&gt;

&lt;br&gt;
&lt;p&gt;
&lt;b&gt;Now, this doesn&#39;t mean that we&#39;re close to finishing the project.&lt;/b&gt; However, we now have the framework to build the rest of the project on. Most of the work from now on will be decrypting/deobfuscating functions and implementing them.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interception (Progress Report 1)</title>
      <link>/post/2023-12-14-interception/</link>
      <pubDate>Thu, 14 Dec 2023 14:23:04 +0000</pubDate>
      
      <guid>/post/2023-12-14-interception/</guid>
      <description>&lt;p&gt;
In this post, We&#39;ll be covering the ways that we lifted the hood on EA/DICE&#39;s MEC server.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;br&gt;&lt;br&gt;

&lt;p&gt;
What exactly is a packet? A packet is simply a small chunk of data that gets sent to and from the MEC server.&lt;br&gt;
They&#39;re critical to internet communication and contain a lot of juicy data that we would like to get our hands on.
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
However, game companies aren&#39;t (completely) stupid and do try to protect the packets that get sent and recieved. They do this with encryption.
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
There are ways to crack encryption. However, Catalyst uses somewhat recent encryption methods so there aren&#39;t many exploits.&lt;br&gt;
We also can&#39;t try and bruteforce guess the decryption key as to do that in a reasonable amount of time would require a quantum computer and we unfortunately don&#39;t own one of those :(
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
Okay then, so how did we manage to get past it? Well the answer is to do with the server software that EA/DICE use.&lt;br&gt;
EA/DICE build all of their game servers on top of their own &#34;Blaze&#34; software. This software has been used to build all EA/DICE game servers roughly since 2008 and is indeed the software that is used for the MEC server.
&lt;br&gt;
The issue with using the same software across lots of different online games is that it makes more people want to take a stab at attacking it. Think of all the possibilities!
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
Well indeed, people did try to attack the Blaze server software and eventually were successful. Thus, the EA-MITM project was created.
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
EA-MITM attacks Blaze&#39;s ProtoSSL implementation and bypasses it to give us access to those sweet sweet unencrypted packets as they enter and exit our computer.
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
So that&#39;s where the story ends, right? Of course not! EA-MITM can only get us so far as Blaze data that&#39;s specific to Catalyst can only be revealed to us in binary, requiring them to be manually translated back to JSON, which is what we&#39;re working on right now with the &lt;a href=&#34;https://github.com/ploxxxy/catalyst-mitm&#34;&gt;Catalyst-MITM&lt;/a&gt; project :)
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
If you would like to find out more about Blaze you can look at &lt;a href=&#34;https://www.slideshare.net/DICEStudio/battlelog-building-scalable-web-sites-with-tight-game-integration&#34;&gt;this slideshow&lt;/a&gt; made by DICE. Do keep in mind however that it is pretty old and outdated :p
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Welcome!</title>
      <link>/post/2023-12-14-welcome/</link>
      <pubDate>Thu, 14 Dec 2023 00:52:04 +0000</pubDate>
      
      <guid>/post/2023-12-14-welcome/</guid>
      <description>&lt;p&gt;
Welcome to the Beat Revival blog!
&lt;/p&gt;

&lt;p&gt;
In this blog we&#39;ll be showcasing our progress and giving technical insight into what we&#39;re doing.
&lt;/p&gt;

&lt;p&gt;
We don&#39;t have anything to post right now ðŸ˜”. However, I urge you to watch the UGC stats video if you haven&#39;t already.
&lt;/p&gt;

&lt;p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube-nocookie.com/embed/IzFReTvF29g?si=PEt4VMzgsdTny9a5&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
